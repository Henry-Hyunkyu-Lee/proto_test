# Auto-generated by Lumenary
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union, Literal, Annotated, Tuple, Set, Any

from datetime import datetime, date, time, timedelta
from uuid import UUID
import uuid

class TokenExchangeRequest(BaseModel):
    client_id: str
    grant_type: str
    code: Optional[str] = None
    code_verifier: Optional[str] = None

class TokenResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"
    expires_in: int = 3600

class TokenValidationRequest(BaseModel):
    token: str
    
class LogoutResponse(BaseModel):
    success: bool = True

# Import user-defined models that we need for input/response models
from core.ingredient import Ingredient
from core.subscription import Subscription
from core.feedback import Feedback
from core.user_profile import UserProfile
from core.supplement import Supplement
from core.genetic_test import GeneticTest
from core.recommendation import Recommendation
from core.test_result import TestResult
from core.delivery import Delivery
from core.weight_record import WeightRecord

class BodyAnalyticsServiceRecordWeight(BaseModel):
  user_id: UUID
  weight: float
  memo: Optional[str] = None

RecordWeightOutputSchema = Dict
class BodyAnalyticsServiceGetWeightHistory(BaseModel):
  user_id: UUID
  days: int

GetWeightHistoryOutputSchema = List[Dict]
class BodyAnalyticsServiceSubmitFeedback(BaseModel):
  user_id: UUID
  supplement_id: UUID
  effectiveness_score: int
  has_side_effects: bool
  detailed_review: Optional[str] = None

SubmitFeedbackOutputSchema = Dict
class BodyAnalyticsServiceGetUserProgressReport(BaseModel):
  user_id: UUID

GetUserProgressReportOutputSchema = Dict
GetTestimonialsOutputSchema = List[Dict]
class BodyGeneticServiceCreateGeneticTest(BaseModel):
  user_id: UUID
  full_name: str
  phone: str
  email: str
  address: Dict

CreateGeneticTestOutputSchema = Dict
GetSampleReportOutputSchema = Dict
class BodyGeneticServiceGetUserGeneticTest(BaseModel):
  user_id: UUID

GetUserGeneticTestOutputSchema = Optional[Dict]
GetAllSupplementsOutputSchema = List[Dict]
class BodyGeneticServiceGetUserRecommendations(BaseModel):
  user_id: UUID

GetUserRecommendationsOutputSchema = Optional[Dict]
class BodySubscriptionServiceCreateSubscription(BaseModel):
  user_id: UUID
  payment_info: Dict

CreateSubscriptionOutputSchema = Dict
class BodySubscriptionServiceGetUserSubscription(BaseModel):
  user_id: UUID

GetUserSubscriptionOutputSchema = Optional[Dict]
class BodySubscriptionServiceUpdateSubscriptionStatus(BaseModel):
  subscription_id: UUID
  new_status: str

UpdateSubscriptionStatusOutputSchema = Dict
class BodySubscriptionServiceCreateDelivery(BaseModel):
  subscription_id: UUID
  delivery_address: Dict
  product_list: List[Dict]

CreateDeliveryOutputSchema = Dict
class BodySubscriptionServiceGetUserDeliveries(BaseModel):
  user_id: UUID

GetUserDeliveriesOutputSchema = List[Dict]
GetPricingInfoOutputSchema = Dict
    